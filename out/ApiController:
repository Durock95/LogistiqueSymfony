ApiController:

<?php

namespace App\Controller;

use App\Entity\Booking;
use App\Repository\BookingRepository;
use DateTime;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

final class ApiController extends AbstractController{
    #[Route('/api', name: 'app_api')]
    public function index(): Response
    {
        return $this->render('api/index.html.twig', [
            'controller_name' => 'ApiController',
        ]);
    }

    #[Route('/api/{id}/edit', name: 'api_event_edit', methods: ['POST'])]
    public function majEvent(?Booking $booking, BookingRepository $bookingRepository, Request $request, EntityManagerInterface $entityManager, int $id): Response
    {
        // On récupère les données
//        $donnees = $entityManager->getRepository(Booking::class)->find($id);
//        $id = $request->query->get('id', $id);
        // $donnees = $request->query->get();
//        $donnees = json_encode(($request->getContent()));
        $booking = $bookingRepository->find($id);
        if (!$booking) {
            return new JsonResponse(['error' => 'Évènement non trouvé'], 404);
        }

        $data = json_decode($request->getContent(), true);

       // if (!$data || !isset($data['id']) || !isset($data['title']) || !isset($data['start']) || !isset($data['end'])
            // !$donnees->title && !$donnees->start && !$donnees->end)
//            isset($id) && !empty($id) &&
//            isset(Booking::class->getId) && !empty(Booking::class->getId) &&
//            isset(Booking::class->getTitle) && !empty(Booking::class->getTitle) &&
//            isset(Booking::class->getStart) && !empty(Booking::class->getStart) &&
//            isset(Booking::class->getEnd) && !empty(Booking::class->getEnd)
        //    )
        //    return new JsonResponse(['error' => 'Données incomplètes'], 400);
        try {
            $start = new \DateTime($data['start']);
            $end = new \DateTime($data['end']);
//            $booking->setStart(new \DateTime($data['start']));
//            $booking->setEnd(new \DateTime($data['end']));



            return new JsonResponse(['message' => 'Évènement mis à jour'], 200);
        } catch (\Exception $e) {
            return new JsonResponse(['error' => 'Erreur lors de la mise à jour'], 500);
        }
        $booking->setStart($start);
        $booking->setEnd($end);
        $entityManager->flush();

        return new JsonResponse(['message' => 'Event successfully updated!'], 200);
            // isset($donnees->description) && !empty($donnees->description) &&
            // isset($donnees->backgroundColor) && !empty($donnees->backgroundColor) &&
            // isset($donnees->borderColor) && !empty($donnees->borderColor) &&
            // isset($donnees->textColor) && !empty($donnees->textColor) &&
        //{
            // Les données sont complètes
            // On initialise un code
            //$code = 200;
            // On vérifié si l'id existe
            // $booking = $id ? $entityManager->getRepository(Booking::class)->find($id) : new Booking;
//            if (!$booking){
//                // On instancie un rdv
//                $booking = new Booking;
//                // On change le code
//                $code = 201;
//
//                // On hydrate l'objet avec les données
////                $booking->getId();
//                $booking->getId($id);
//                $booking->setTitle(Booking::class->getTitle);
//                $booking->setStart(new DateTime(Booking::class->getStart));
//                $booking->setEnd(new DateTime(Booking::class->getEnd));
//                // if ($donnees->allDay){
//                //     $booking->setEnd(new DateTime($donnees->start));
//                // } else {
//                //     $booking->setEnd(new DateTime($donnees->end));
//                // }
//                // $booking->setAllDay($donnees->allDay);
//                // $booking->setDescription($donnees->description);
//                // $booking->setBackgroundColor($donnees->backgroundColor);
//                // $booking->setTextColor($donnees->textColor);
//                // $booking->setBorderColor($donnees->borderColor);
//                // $em = $this->getDoctrine()->getManager();
//                $entityManager->persist($booking);
//                $entityManager->flush();
//                // On retourne le code
//                return new Response('Ok', $code);
//            }
//        }  else {
//            return new Response('Données incomplètes', 404);
//            }
//            return $this->render('calendar/calendar.html.twig', [
//                'controller_name' => 'ApiController'
//            ]);
    }
}